// === AppDbContext ===
public class AppDbContext : DbContext
{
    public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) {}

    public DbSet<User> Users { get; set; }
    public DbSet<Category> Categories { get; set; }
    public DbSet<Book> Books { get; set; }
    public DbSet<Order> Orders { get; set; }
    public DbSet<OrderDetail> OrderDetails { get; set; }
    public DbSet<Favorite> Favorites { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);
    }
}

// === Entity Modelleri ===
public class Book
{
    public int Id { get; set; }
    public string Title { get; set; }
    public string ImageUrl { get; set; }
    public decimal Price { get; set; }
    public string Description { get; set; }
    public int CategoryId { get; set; }
    public Category Category { get; set; }
}

public class Category
{
    public int Id { get; set; }
    public string Name { get; set; }
    public ICollection<Book> Books { get; set; }
}

public class User
{
    public int Id { get; set; }
    public string Name { get; set; }
    public string Email { get; set; }
    public string Role { get; set; }
    public ICollection<Order> Orders { get; set; }
    public ICollection<Favorite> Favorites { get; set; }
}

public class Order
{
    public int Id { get; set; }
    public int UserId { get; set; }
    public User User { get; set; }
    public DateTime OrderDate { get; set; }
    public ICollection<OrderDetail> OrderDetails { get; set; }
}

public class OrderDetail
{
    public int Id { get; set; }
    public int OrderId { get; set; }
    public Order Order { get; set; }
    public int BookId { get; set; }
    public Book Book { get; set; }
    public int Quantity { get; set; }
}

public class Favorite
{
    public int Id { get; set; }
    public int UserId { get; set; }
    public User User { get; set; }
    public int BookId { get; set; }
    public Book Book { get; set; }
}

// === API: BooksController ===
[ApiController]
[Route("api/[controller]")]
public class BooksController : ControllerBase
{
    private readonly AppDbContext _context;
    public BooksController(AppDbContext context)
    {
        _context = context;
    }

    [HttpGet]
    public async Task<IActionResult> GetBooks()
    {
        var books = await _context.Books.Include(b => b.Category).ToListAsync();
        return Ok(books);
    }

    [HttpGet("{id}")]
    public async Task<IActionResult> GetBook(int id)
    {
        var book = await _context.Books.Include(b => b.Category).FirstOrDefaultAsync(b => b.Id == id);
        if (book == null) return NotFound();
        return Ok(book);
    }
}

// === MVC: HomeController ===
public class HomeController : Controller
{
    private readonly HttpClient _httpClient;
    public HomeController(IHttpClientFactory factory)
    {
        _httpClient = factory.CreateClient();
        _httpClient.BaseAddress = new Uri("https://localhost:5001/");
    }

    public async Task<IActionResult> Index()
    {
        var response = await _httpClient.GetAsync("api/books");
        var json = await response.Content.ReadAsStringAsync();
        var books = JsonConvert.DeserializeObject<List<Book>>(json);
        return View(books);
    }
}

// === MVC: BookController ===
public class BookController : Controller
{
    private readonly HttpClient _httpClient;
    public BookController(IHttpClientFactory factory)
    {
        _httpClient = factory.CreateClient();
        _httpClient.BaseAddress = new Uri("https://localhost:5001/");
    }

    public async Task<IActionResult> Details(int id)
    {
        var response = await _httpClient.GetAsync($"api/books/{id}");
        if (!response.IsSuccessStatusCode) return NotFound();

        var json = await response.Content.ReadAsStringAsync();
        var book = JsonConvert.DeserializeObject<Book>(json);
        return View(book);
    }
}

// === View: Views/Home/Index.cshtml ===
@model List<Book>
@{
    ViewData["Title"] = "Anasayfa";
}
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<div class="container mt-4">
    <div class="row">
        @foreach (var book in Model)
        {
            <div class="col-md-3 mb-4">
                <div class="card h-100">
                    <img src="@book.ImageUrl" class="card-img-top" alt="@book.Title">
                    <div class="card-body">
                        <h5 class="card-title">@book.Title</h5>
                        <p class="card-text">@book.Price TL</p>
                        <p class="card-text"><small class="text-muted">@book.Category?.Name</small></p>
                        <a href="/Book/Details/@book.Id" class="btn btn-primary btn-sm">Detay</a>
                        <a href="/Cart/Add/@book.Id" class="btn btn-success btn-sm">Sepete Ekle</a>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

// === View: Views/Book/Details.cshtml ===
@model Book
@{
    ViewData["Title"] = "Kitap Detayı";
}
<div class="container mt-4">
    <div class="row">
        <div class="col-md-4">
            <img src="@Model.ImageUrl" class="img-fluid" alt="@Model.Title" />
        </div>
        <div class="col-md-8">
            <h2>@Model.Title</h2>
            <p>@Model.Description</p>
            <p><strong>Fiyat:</strong> @Model.Price TL</p>
            <p><strong>Kategori:</strong> @Model.Category?.Name</p>
            <a href="/Cart/Add/@Model.Id" class="btn btn-success">Sepete Ekle</a>
        </div>
    </div>
</div>

// === Startup.cs (Program.cs / Dependency Injection) ===
services.AddDbContext<AppDbContext>(options =>
    options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection")));
services.AddHttpClient();
services.AddControllersWithViews();







1. Code First Veri Tabanı Modelleri
User, Category, Book, Order, OrderDetail, Favorite sınıfları

AppDbContext üzerinden yönetim

 2. REST API (BooksController)
Kitap listesi ve detay endpoint'leri

 3. MVC Uygulaması
 HomeController
Anasayfada tüm kitapları API'den çeker ve görüntüler

 BookController
Kitapların detay bilgisi

 Görünümler (Views)
Views/Home/Index.cshtml: Bootstrap kartları ile kitap listesi

Views/Book/Details.cshtml: Kitap detay ekranı

 4. Alt Yapı Hazırlığı
Bootstrap ile responsive görünüm

HttpClient ile API ile haberleşme

Dependency Injection (Startup.cs içinde)

 Sonraki Adımlar (isteğe bağlı geliştirilebilir)
Sepet işlemleri (CartController, Session)

Sipariş tamamla, favorilere ekle

Admin panel (CRUD + yetkilendirme)

Identity veya Role bazlı giriş/çıkış



